[{"order":2,"title":"Comparações entre os tipos","markdown":"A imagem abaixo demonstra a diferença entro os tipos principais.\nNote quão mais \"level\" é o Big-O linear (O(n)), comparado ao Big-O exponencial (O(2^n)).\n\n![Comparação dos tipos principais do Big-O](https://drive.google.com/uc?export=view&id=1vDgqGAtkJoLcznkI8bCkox2aIn4GvkUx)\n","type":"text","created":1664673283845,"url":"13fb8b01-3cbe-430e-a546-01b4704cf45f","modified":1664673460524},{"created":1664674633667,"type":"quiz","url":"1daf131e-3872-479f-9ac2-cf846a7dd36c","modified":1664928457104,"markdown":"```javascript\nconst input = [...][...]; // Uma array multidimencional de tamanho n * m\n\nmyFunction_1(input) {\n  return input[0]+input[1];\n}\n\nmyFunction_2(input) {\n  for(n of input){\n    for(m of n){\n      ...\n    }  \n  }\n}\n\nmyFunction_3(input) {\n  for(n of input){\n    for(n of input){\n      ...\n    }  \n  }\n}\n\nmyFunction_4(input) {\n  for(var i=0; i<input.length; i++){\n    ...\n  }\n}\n\nmyFunction_5(input) {\n  for(var i=0; i<input.length; i=i*2){\n    ...\n  }\n}\n\n```","title":"Teste seus conhecimentos","order":9,"questions":[{"items":["Sim","Não","","",""],"explanation":"O tempo de execução varia de acordo com o tamanho do input?","question":"myFunction_1 tem Big-O constante"},{"question":"O Big-O da myFunction_2 é:","items":["Linear","Constante","Exponencial","Polinomial",""],"explanation":"m e n são variáveis diferentes."},{"explanation":"Repare que \"n\" é percorrido duas vezes, em loops aninhados.","question":"O Big-O da myFunction_3 é:","items":["Polinomial","Constante","Linear","Exponencial",""]},{"question":"A diferença entre os Big-Os das myFunction_4 e myFunction_5 é:","explanation":"Repare como o i é \"cortado\" em um dos casos.","items":["Um é linear e o outro é logarítmico.","Não tem diferença: Os dois são lineares.","Não tem diferença: Os dois são logarítmico.","Um é logarítmico e o outro é exponencial.",""]}]},{"type":"text","url":"2ac6413d-0445-48f2-b6ea-59b9786744cf","markdown":"**A complexidade polinomial aumenta à medida que o expoente aumenta.**\n\nPor exemplo, O(n⁵) é mais complexo que O(n⁴). Devido à sua simplicidade, passamos por muitos exemplos de polinômios nas seções anteriores.","modified":1664673882285,"title":"Polinomial - O(n^const)","order":5,"created":1664673799337},{"created":1664673587271,"order":4,"modified":1664673824419,"url":"494f40dc-02b2-4957-9bb8-53f526928322","markdown":"**O(log(n)) é mais complexo que O(1), mas menos complexo que polinomiais.**\n\nComo a complexidade geralmente está relacionada a algoritmos de \"*dividir para conquistar*\", O(log(n)) geralmente é uma boa complexidade que você pode alcançar para algoritmos de classificação. O(log(n)) é menos complexo que O(√n), porque a função raiz quadrada pode ser considerada um polinômio, onde o expoente é 0,5.\n\nCaso esteja interessado ou não conheça algoritmos do tipo dividir para conquistar, clique no link abaixo:\n[https://pt.wikipedia.org/wiki/Divis%C3%A3o_e_conquista](https://pt.wikipedia.org/wiki/Divis%C3%A3o_e_conquista)","title":"Logaritmico - O(log(n))","type":"text"},{"markdown":"**O(1) tem a menor complexidade.**\n\nMuitas vezes chamado de “tempo constante”, se você puder criar um algoritmo para resolver o problema em O(1), provavelmente estará no seu melhor. Em alguns cenários, a complexidade pode ir além de O(1), então podemos analisá-los encontrando sua contraparte O(1/g(n)). Por exemplo, O(1/n) é mais complexo que O(1/n²).","type":"text","url":"5aafecfb-9f0e-442e-a6c9-5dd5c23e2813","title":"Constante - O(1)","modified":1664673815310,"created":1664673510206,"order":3},{"title":"Entenda","url":"5ff0794b-8b1d-49d2-b047-a84676379517","order":1,"type":"text","modified":1664674976686,"created":1664673199910,"markdown":"Quando estamos tentando descobrir o Big-O para uma determinada função f(n), nos importamos apenas com o termo dominante da função.\nO termo dominante é o termo que cresce mais rápido.\n\nPor exemplo, n² cresce mais rápido que n, então se tivermos algo como f(n) = n² + 5n + 6, será Big-O(n²).\nSe você já fez algum cálculo antes, isso é muito semelhante ao atalho de encontrar limites para polinômios fracionários, onde você só se importa com o termo dominante para numeradores e denominadores no final."},{"type":"text","title":"Exponencial - O(const^n)","url":"835ae1a3-d5d3-4f79-9d0e-99d8d46a2a74","modified":1664928415696,"created":1664673875823,"order":6,"markdown":"**Exponenciais têm maior complexidade do que polinomiais**\n\nO(2ⁿ) é mais complexo que O(n⁹⁹).\n\nGeralmente ainda tomamos 2 como base para exponenciais e logaritmos porque as coisas tendem a ser binárias na Ciência da Computação, mas os expoentes podem ser alterados alterando os coeficientes. Se não for especificado, a base para logaritmos é considerada 2."},{"order":8,"url":"8dfa5200-b219-439c-800e-38df79df4f2c","type":"text","modified":1664674059951,"title":"Comparação entre os tipos (novamente)","created":1664674059951,"markdown":"Agora você deve conseguir perceber com bastante clareza a diferença entre os tipos de Big-O demonstrados na imagem abaixo.\n\n![Comparação dos tipos principais do Big-O](https://drive.google.com/uc?export=view&id=1vDgqGAtkJoLcznkI8bCkox2aIn4GvkUx)\n"},{"type":"text","created":1664673931466,"url":"c7d8a525-ad47-4e02-9816-67ede3b3ac69","title":"Fatorial - O(n!)","markdown":"**Os fatoriais têm maior complexidade do que os exponenciais.**\n\nSe você estiver interessado no raciocínio, procure a função Gamma, é uma continuação analítica de um fatorial.\nUma pequena prova é que tanto os fatoriais quanto os exponenciais têm o mesmo número de multiplicações, mas os números que são multiplicados crescem para os fatoriais, enquanto permanecem constantes para os exponenciais.","order":7,"modified":1664674950214}]